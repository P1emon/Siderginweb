@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers
@model MyEStore.Areas.Admin.Controllers.DashboardViewModel
@{
    ViewData["Title"] = "Trang chủ Admin";
    Layout = "~/Areas/Admin/Views/Shared/_AdminLayout.cshtml";

    int[] selectedDays = new int[] { 0, 3, 6, 9, 12, 15, 18, 21, 24, 27, 29 };
}

<!DOCTYPE html>
<html lang="vi">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <link href="https://fonts.googleapis.com/css2?family=Roboto:wght@400;500;700&display=swap" rel="stylesheet">
    <style>
        body {
            font-family: 'Roboto', sans-serif;
            background-color: #f5f7fb; /* Màu nền xanh nhạt */
        }

        h1 {
            color: #1e40af; /* Xanh đậm cho tiêu đề */
        }

        select, option {
            font-family: 'Roboto', sans-serif !important;
        }

        .dashboard-card {
            transition: all 0.3s ease;
            border-radius: 12px;
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.05); /* Bóng đổ nhẹ */
            border: none;
            background-color: #ffffff;
        }

            .dashboard-card:hover {
                transform: translateY(-3px);
                box-shadow: 0 6px 20px rgba(0, 0, 0, 0.1);
            }

        .fade-in {
            animation: fadeIn 0.8s ease-out;
        }

        @@keyframes fadeIn {
            from {
                opacity: 0;
                transform: translateY(10px);
            }

            to {
                opacity: 1;
                transform: translateY(0);
            }
        }

        .table-modern {
            border-collapse: separate;
            border-spacing: 0;
            background-color: #ffffff;
        }

            .table-modern th, .table-modern td {
                border: 1px solid #e5e7eb;
                padding: 10px;
                font-size: 14px;
            }

            .table-modern thead th {
                background-color: #f8fafc;
                font-weight: 600;
                color: #1e40af; /* Xanh đậm */
            }

            .table-modern tbody tr:hover {
                background-color: #eff6ff; /* Xanh nhạt khi hover */
            }

        .header-card {
            background: linear-gradient(135deg, #60a5fa, #3b82f6); /* Gradient xanh lam tươi sáng */
            color: white;
            border-radius: 12px;
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
        }

        .container-fluid {
            max-width: 1600px;
            padding: 0 20px;
        }

        .metric-box {
            border-right: 1px solid rgba(255, 255, 255, 0.2);
        }

            .metric-box:last-child {
                border-right: none;
            }

        .chart-container {
            height: 350px; /* Giảm chiều cao để gọn gàng hơn */
            position: relative;
        }

        .progress {
            height: 8px;
            border-radius: 8px;
            background-color: #e5e7eb;
        }

        .progress-bar {
            background: linear-gradient(to right, #60a5fa, #3b82f6); /* Gradient xanh lam */
        }

        .badge-custom {
            background-color: #dbeafe; /* Xanh nhạt */
            color: #1e40af; /* Xanh đậm */
            padding: 4px 8px;
            border-radius: 6px;
            font-weight: 500;
            font-size: 12px;
        }

        .section-title {
            font-size: 1.5rem;
            font-weight: 600;
            color: #1e40af;
            margin-bottom: 1rem;
        }

        .card-title {
            font-size: 1.25rem;
            font-weight: 500;
            color: #1e40af;
        }

        .text-muted {
            color: #6b7280;
        }
    </style>
</head>
<body>
    <div class="container-fluid py-5">
        <h1 class="text-center mb-5">Bảng Điều Khiển Quản Trị</h1>

        <!-- Section 1: Overview Metrics -->
        <section class="mb-5">
            <div class="row g-4">
                <div class="col-12">
                    <div class="card header-card shadow fade-in">
                        <div class="card-body py-4">
                            <div class="row text-center">
                                <div class="col-md-3 metric-box">
                                    <h3 class="card-title mb-2"><i class="fas fa-chart-line me-2"></i>Tổng Sức Mua</h3>
                                    <p class="display-5 fw-bold mb-1">@Model.TotalUnitsSold</p>
                                    <p class="text-light mb-0 fs-6">Sản phẩm đã bán (30 ngày)</p>
                                </div>
                                <div class="col-md-3 metric-box">
                                    <h3 class="card-title mb-2"><i class="fas fa-money-bill-wave me-2"></i>Tổng Doanh Thu</h3>
                                    <p class="display-5 fw-bold mb-1">@Model.TotalRevenue.ToString("N0") VND</p>
                                    <p class="text-light mb-0 fs-6">Doanh thu (30 ngày)</p>
                                </div>
                                <div class="col-md-3 metric-box">
                                    <h3 class="card-title mb-2"><i class="fas fa-shopping-cart me-2"></i>Tổng Đơn Hàng</h3>
                                    <p class="display-5 fw-bold mb-1">@Model.TotalOrders</p>
                                    <p class="text-light mb-0 fs-6">Đơn hàng (30 ngày)</p>
                                </div>
                                <div class="col-md-3">
                                    <h3 class="card-title mb-2"><i class="fas fa-receipt me-2"></i>Giá Trị Đơn Hàng</h3>
                                    <p class="display-5 fw-bold mb-1">@Model.AverageOrderValue.ToString("N0") VND</p>
                                    <p class="text-light mb-0 fs-6">Trung bình mỗi đơn</p>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </section>

        <!-- Section 2: Sales Overview -->
        <section class="mb-5">
            <div class="row g-4">
                <!-- Strong Purchasing Power -->
                <div class="col-12">
                    <div class="card dashboard-card shadow fade-in">
                        <div class="card-body">
                            <h4 class="card-title mb-4"><i class="fas fa-chart-bar me-2"></i>Sức Mua Mạnh (30 Ngày Qua)</h4>
                            <div class="chart-container">
                                <canvas id="strongSalesChart"></canvas>
                            </div>
                        </div>
                    </div>
                </div>
                <!-- Weak Purchasing Power -->
                <div class="col-12">
                    <div class="card dashboard-card shadow fade-in">
                        <div class="card-body">
                            <h4 class="card-title mb-4"><i class="fas fa-table me-2"></i>Sức Mua Yếu (30 Ngày Qua)</h4>
                            <div class="table-responsive">
                                <table class="table table-modern">
                                    <thead>
                                        <tr>
                                            <th>Sản phẩm</th>
                                            <th>Số lượng bán</th>
                                            <th>Tồn kho</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        @foreach (var item in Model.WeakSales)
                                        {
                                            <tr>
                                                <td>@item.ProductName</td>
                                                <td>@item.UnitsSold</td>
                                                <td>@item.CurrentStock</td>
                                            </tr>
                                        }
                                    </tbody>
                                </table>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </section>

        <!-- Section 3: Customer and Inventory Analysis -->
        <section class="mb-5">
            <div class="row g-4">
                <!-- Customer Purchase Ratio -->
                <div class="col-lg-6">
                    <div class="card dashboard-card shadow fade-in">
                        <div class="card-body">
                            <h4 class="card-title mb-4"><i class="fas fa-users me-2"></i>Tỉ Xuất Mua Hàng của Khách Hàng</h4>
                            <p class="text-muted mb-4">Phần trăm khách hàng đã mua sản phẩm trong 30 ngày qua</p>
                            <div class="table-responsive">
                                <table class="table table-modern">
                                    <thead>
                                        <tr>
                                            <th>Sản phẩm</th>
                                            <th>Số lượng khách hàng</th>
                                            <th>Tỉ lệ (%)</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        @foreach (var item in Model.CustomerPurchaseRatios)
                                        {
                                            <tr>
                                                <td>@item.ProductName</td>
                                                <td>@item.CustomersCount</td>
                                                <td>
                                                    <div class="d-flex align-items-center">
                                                        <div class="progress flex-grow-1 me-3">
                                                            <div class="progress-bar" role="progressbar" style="width: @item.Ratio%"></div>
                                                        </div>
                                                        <span class="badge-custom">@item.Ratio.ToString("F1")%</span>
                                                    </div>
                                                </td>
                                            </tr>
                                        }
                                    </tbody>
                                </table>
                            </div>
                        </div>
                    </div>
                </div>
                <!-- Inventory Analysis -->
                <div class="col-lg-6">
                    <div class="card dashboard-card shadow fade-in">
                        <div class="card-body">
                            <h4 class="card-title mb-4"><i class="fas fa-boxes me-2"></i>Phân Tích Tồn Kho</h4>
                            <div class="table-responsive">
                                <table class="table table-modern">
                                    <thead>
                                        <tr>
                                            <th>Sản phẩm</th>
                                            <th>Tồn kho</th>
                                            <th>Bán/ngày</th>
                                            <th>Còn đủ (ngày)</th>
                                            <th>Tỉ lệ luân chuyển</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        @foreach (var item in Model.InventoryTurnoverRates)
                                        {
                                            <tr>
                                                <td>@item.ProductName</td>
                                                <td>@item.CurrentStock</td>
                                                <td>@item.DailySalesRate</td>
                                                <td>@item.DaysOfSupply</td>
                                                <td>@item.TurnoverRate <span class="text-muted small">(@item.AnnualizedTurnoverRate/năm)</span></td>
                                            </tr>
                                        }
                                    </tbody>
                                </table>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </section>

        <!-- Section 4: Category Sales Chart -->
        <section>
            <div class="row g-4">
                <div class="col-12">
                    <div class="card dashboard-card shadow fade-in">
                        <div class="card-body">
                            <div class="d-flex justify-content-between align-items-center mb-4">
                                <h4 class="card-title mb-0"><i class="fas fa-layer-group me-2"></i>Doanh Số Theo Danh Mục</h4>
                                <select id="categorySelector" class="form-select" style="width: auto;">
                                    <option value="" selected disabled>Chọn danh mục...</option>
                                </select>
                            </div>
                            <div class="chart-container">
                                <canvas id="categorySalesChart"></canvas>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </section>
    </div>

    @section Scripts {
        <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
        <script>
            function decodeHtml(html) {
                const txt = document.createElement('textarea');
                txt.innerHTML = html;
                return txt.value;
            }

            const ctx = document.getElementById('strongSalesChart').getContext('2d');
            const categoryCtx = document.getElementById('categorySalesChart').getContext('2d');

            const colors = [
                'rgba(96, 165, 250, 0.85)', /* Xanh dương nhạt */
                'rgba(251, 146, 60, 0.85)', /* Cam nhạt */
                'rgba(52, 211, 153, 0.85)', /* Xanh lá */
                'rgba(255, 159, 64, 0.85)',
                'rgba(153, 102, 255, 0.85)',
                'rgba(255, 205, 86, 0.85)',
                'rgba(201, 203, 207, 0.85)',
                'rgba(22, 160, 133, 0.85)',
                'rgba(142, 68, 173, 0.85)',
                'rgba(230, 126, 34, 0.85)'
            ];

            const borderColors = [
                'rgb(96, 165, 250)',
                'rgb(251, 146, 60)',
                'rgb(52, 211, 153)',
                'rgb(255, 159, 64)',
                'rgb(153, 102, 255)',
                'rgb(255, 205, 86)',
                'rgb(201, 203, 207)',
                'rgb(22, 160, 133)',
                'rgb(142, 68, 173)',
                'rgb(230, 126, 34)'
            ];

            const productLabels = [@Html.Raw(string.Join(",", Model.StrongSales.Select(s => $"'{s.ProductName}'")))];
            const totalSalesData = [@Html.Raw(string.Join(",", Model.StrongSales.Select(s => s.DailySales.Sum(ds => ds.UnitsSold))))];

            const strongSalesChart = new Chart(ctx, {
                type: 'bar',
                data: {
                    labels: productLabels,
                    datasets: [{
                        axis: 'y',
                        label: 'Tổng số lượng bán',
                        data: totalSalesData,
                        backgroundColor: colors.slice(0, productLabels.length),
                        borderColor: borderColors.slice(0, productLabels.length),
                        borderWidth: 1,
                        borderRadius: 6,
                        barThickness: 25,
                        maxBarThickness: 35
                    }]
                },
                options: {
                    indexAxis: 'y',
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: {
                        legend: { display: false },
                        tooltip: {
                            backgroundColor: 'rgba(0, 0, 0, 0.85)',
                            padding: 10,
                            titleFont: { size: 13, weight: 'bold' },
                            bodyFont: { size: 12 },
                            cornerRadius: 6,
                            callbacks: {
                                label: function(context) {
                                    return `Số lượng bán: ${context.parsed.x} sản phẩm`;
                                },
                                afterLabel: function(context) {
                                    const total = totalSalesData.reduce((a, b) => a + b, 0);
                                    const percentage = Math.round((context.parsed.x / total) * 100);
                                    return `Chiếm ${percentage}% tổng doanh số`;
                                }
                            }
                        }
                    },
                    scales: {
                        x: {
                            beginAtZero: true,
                            grid: { color: 'rgba(0, 0, 0, 0.05)' },
                            title: {
                                display: true,
                                text: 'Số lượng bán',
                                font: { weight: 'bold', size: 14 },
                                color: '#1e40af'
                            },
                            ticks: { precision: 0 }
                        },
                        y: {
                            grid: { display: false }
                        }
                    },
                    animation: {
                        duration: 1000,
                        easing: 'easeOutQuart'
                    }
                }
            });

            let categorySalesChart;
            const categorySelector = document.getElementById('categorySelector');
            const categories = [
            @foreach (var loai in ViewBag.DanhSachLoai)
            {
                <text>{ id: @loai.MaLoai, name: '@Html.Raw(loai.TenLoai)' },</text>
            }
            ];

            categories.forEach(category => {
                const option = document.createElement('option');
                option.value = category.id;
                option.textContent = decodeHtml(category.name);
                categorySelector.appendChild(option);
            });

            categorySelector.addEventListener('change', function() {
                const categoryId = this.value;
                if (categoryId) {
                    fetchProductsByCategory(categoryId);
                }
            });

            function fetchProductsByCategory(categoryId) {
                fetch(`/Admin/Home/GetProductsByCategory?categoryId=${categoryId}`, {
                    headers: {
                        'Accept': 'application/json; charset=utf-8'
                    }
                })
                    .then(response => response.json())
                    .then(data => {
                        updateCategorySalesChart(data);
                    })
                    .catch(error => console.error('Error fetching category data:', error));
            }

            function updateCategorySalesChart(data) {
                const labels = data.map(item => decodeHtml(item.productName));
                const salesData = data.map(item => item.unitsSold);
                const stockData = data.map(item => item.currentStock);

                if (categorySalesChart) {
                    categorySalesChart.destroy();
                }

                categorySalesChart = new Chart(categoryCtx, {
                    type: 'bar',
                    data: {
                        labels: labels,
                        datasets: [
                            {
                                label: 'Số lượng bán',
                                data: salesData,
                                backgroundColor: 'rgba(96, 165, 250, 0.7)',
                                borderColor: 'rgb(96, 165, 250)',
                                borderWidth: 1,
                                borderRadius: 6,
                                barPercentage: 0.6
                            },
                            {
                                label: 'Tồn kho',
                                data: stockData,
                                backgroundColor: 'rgba(251, 146, 60, 0.7)',
                                borderColor: 'rgb(251, 146, 60)',
                                borderWidth: 1,
                                borderRadius: 6,
                                barPercentage: 0.6
                            }
                        ]
                    },
                    options: {
                        responsive: true,
                        maintainAspectRatio: false,
                        plugins: {
                            legend: {
                                position: 'top',
                                labels: {
                                    font: { size: 12 },
                                    color: '#1e40af'
                                }
                            },
                            tooltip: {
                                backgroundColor: 'rgba(0, 0, 0, 0.85)',
                                padding: 10,
                                titleFont: { size: 13, weight: 'bold' },
                                bodyFont: { size: 12 },
                                cornerRadius: 6
                            }
                        },
                        scales: {
                            y: {
                                beginAtZero: true,
                                grid: { color: 'rgba(0, 0, 0, 0.05)' },
                                title: {
                                    display: true,
                                    text: 'Số lượng',
                                    font: { weight: 'bold', size: 14 },
                                    color: '#1e40af'
                                },
                                ticks: { precision: 0 }
                            },
                            x: {
                                grid: { display: false },
                                ticks: {
                                    maxRotation: 45,
                                    minRotation: 45,
                                    font: { size: 12 }
                                }
                            }
                        },
                        animation: {
                            duration: 1000,
                            easing: 'easeOutQuart'
                        }
                    }
                });
            }

            document.addEventListener('DOMContentLoaded', function() {
                fetch('/Admin/Home/GetCustomerPurchaseRatios')
                    .then(response => response.json())
                    .then(data => {
                        console.log('Customer purchase ratio data loaded:', data);
                    })
                    .catch(error => console.error('Error fetching customer data:', error));

                fetch('/Admin/Home/GetInventoryAnalytics')
                    .then(response => response.json())
                    .then(data => {
                        console.log('Inventory analytics data loaded:', data);
                    })
                    .catch(error => console.error('Error fetching inventory data:', error));
            });
        </script>
    }
</body>
</html>