@model IEnumerable<MyEStore.Models.CartItem>

@{
    ViewData["Title"] = "Thanh Toán";
}

@Html.Partial("livechat")

<div class="container py-5" style="max-width: 1400px;">
    <h1 class="text-center fw-bold mb-5" style="color: #4A5568;">Xác Nhận Thanh Toán</h1>

    <div class="row">
        <!-- Order Summary -->
        <div class="col-lg-8 mb-4">
            <div class="card shadow border-0 rounded-4">
                <div class="card-body">
                    <h4 class="text-center fw-bold mb-4" style="color: #2D3748;">Thông Tin Đơn Hàng</h4>
                    <div class="table-responsive">
                        <table class="table table-hover align-middle">
                            <thead class="bg-gradient-primary text-black">
                                <tr>
                                    <th>Hình Ảnh</th>
                                    <th>Sản Phẩm</th>
                                    <th>Đơn Giá</th>
                                    <th>Số Lượng</th>
                                    <th>Thành Tiền</th>
                                    <th>Giảm Giá</th> <!-- Cột mới -->
                                </tr>
                            </thead>
                             <tbody>
                                        @foreach (var item in Model)
                                        {
                                            var giaGoc = item.DonGia * item.SoLuong;
                                            var giamGia = giaGoc > 0 ? (giaGoc - item.ThanhTien) / giaGoc * 100 : 0;

                                            <tr>
                                                <td>
                                                    <img src="~/Hinh/HangHoa/@item.Hinh" alt="@item.TenHh" class="img-thumbnail rounded" style="width: 80px; height: 80px;">
                                                </td>
                                                <td>@item.TenHh</td>
                                                <td>@item.DonGia.ToString("#,##0") Vnđ</td>
                                                <td>@item.SoLuong</td>
                                                <td class="text-danger fw-bold">@item.ThanhTien.ToString("#,##0") Vnđ</td>
                                                <td>
                                                        @if (giamGia > 0)
                                                        {
                                                    <span class="text-success fw-semibold">-@giamGia% </span>
                                                        }
                                                        else
                                                        {
                                                    <span class="text-muted">0%</span>
                                                        }
                                                </td>
                                            </tr>
                                            }
                                </tbody>

                        </table>
                    </div>

                    <div class="text-end mt-4">
                        <h3>
                            Tổng cộng:
                            <span class="text-danger fw-bold">@Model.Sum(p => p.ThanhTien).ToString("#,##0") đ</span>
                        </h3>
                    </div>

                    <!-- Địa chỉ nhận hàng -->
                    <div class="mb-3 text-center">
                         <label for="selectedAddress" class="form-label fw-bold fs-5">Chọn Địa Chỉ Nhận Hàng:</label>
                        <div class="d-flex justify-content-center align-items-center gap-2 flex-wrap mb-3">
                            <select id="selectedAddress" class="form-select" style="width: 280px; font-size: 1.05rem;">
                                @if (ViewBag.KhachHangs is MyEStore.Entities.KhachHang kh)
                                {
                                    if (!string.IsNullOrWhiteSpace(kh.DiaChi))
                                    {
                              <option value="@kh.DiaChi">@kh.DiaChi (Mặc định)</option>
                                    }
                                    if (!string.IsNullOrWhiteSpace(kh.DiaChiPhu))
                                    {
                                <option value="@kh.DiaChiPhu">@kh.DiaChiPhu (Phụ)</option>
                                    }
                                }
                                else
                                {
                         <option disabled selected>Không có địa chỉ</option>
                                }
                             </select>

                            <button class="btn btn-outline-warning rounded-circle" onclick="openEditAddress()" title="Sửa Địa Chỉ Chính">
                                <i class="bi bi-pencil-square fs-5"></i>
                            </button>

                            <button class="btn btn-outline-info rounded-circle" onclick="openAddSecondary()" title="Thêm Địa Chỉ Phụ">
                                <i class="bi bi-plus-circle fs-5"></i>
                            </button>
                        </div>
                    </div>

                    <div class="mb-4 text-center">
                        <div id="distanceResult" class="mt-2 fw-bold text-primary"></div>
                        <div  >Phí giao hàng: <span id="shippingFee" class="text-danger fw-bold"></span></div>
                        
                        @* <label for="ngayGiao" class="form-label fw-bold">Ngày Giao Hàng:</label> *@
                        <input type="date" id="ngayGiao" class="form-control d-inline-block" style="width: 250px; font-size: 1.2rem; position: absolute; left: -9999px;" />
                    </div>

                </div>
                @* <div id="map" style="height: 350px;" class="rounded shadow mt-3"></div> *@
                

            </div>
        </div>

        <!-- Payment -->
        <div class="col-lg-4">
            <div class="card shadow border-0 rounded-4">
                <div class="card-body">
                    <h4 class="text-center fw-bold mb-4" style="color: #2D3748;">Phương Thức Thanh Toán</h4>
                    <div class="d-flex flex-column gap-3">

                        <!-- MoMo -->
                       
                        <form method="post" action="/Payment/MomoPayment" onsubmit="return attachCommonData(this)" style="display: none;">
                            <input type="hidden" name="ngayGiao" />
                            <input type="hidden" name="selectedAddress" />
                            <button type="submit" class="btn btn-danger btn-lg w-100 fw-bold">Thanh Toán Bằng MoMo</button>
                        </form>


                        <!-- VNPay -->
                        <form method="post" action="/Payment/VnpayOrder" onsubmit="return attachCommonData(this)">
                            <input type="hidden" name="ngayGiao" />
                            <input type="hidden" name="selectedAddress" />
                            <input type="hidden" name="PhiVanChuyen" />
                             @for (int i = 0; i < Model.Count(); i++)
                                {
                                    var item = Model.ElementAt(i);
                                    var giaGoc = item.DonGia * item.SoLuong;
                                    var giamGia = giaGoc > 0 ? (giaGoc - item.ThanhTien) / giaGoc : 0;
                                    <input type="hidden" name="CartItems[@i].MaHh" value="@item.MaHh" />
                                    <input type="hidden" name="CartItems[@i].DonGia" value="@item.DonGia" />
                                    <input type="hidden" name="CartItems[@i].SoLuong" value="@item.SoLuong" />
                                    <input type="hidden" name="CartItems[@i].GiamGia" value="@giamGia" />
                                 }
                            <button type="submit" class="btn btn-primary btn-lg w-100 fw-bold">Thanh Toán Bằng VNPay</button>
                        </form>

                        <!-- Paypal -->
                        <form id="paymentForm" method="post" action="@Url.Action("PaypalCapture", "Payment")">
                            <input type="hidden" name="selectedAddress" />
                            <input type="hidden" name="selectedAddress" />
                            <input type="hidden" name="PhiVanChuyen" />
                            @for (int i = 0; i < Model.Count(); i++)
                            {
                                var item = Model.ElementAt(i);
                                var giaGoc = item.DonGia * item.SoLuong;
                                var giamGia = giaGoc > 0 ? (giaGoc - item.ThanhTien) / giaGoc : 0;
                                        <input type="hidden" name="CartItems[@i].MaHh" value="@item.MaHh" />
                                        <input type="hidden" name="CartItems[@i].DonGia" value="@item.DonGia" />
                                        <input type="hidden" name="CartItems[@i].SoLuong" value="@item.SoLuong" />
                                        <input type="hidden" name="CartItems[@i].GiamGia" value="@giamGia" />
                            }
                            <div id="paypal-button-container"></div>
                        </form>

                        <!-- COD -->
                       <form method="post" action="/Payment/CodPayment" onsubmit="return attachCommonData(this)">
                            <input type="hidden" name="ngayGiao" />
                            <input type="hidden" name="selectedAddress" />
                            <input type="hidden" name="PhiVanChuyen" />

                                @for (int i = 0; i < Model.Count(); i++)
                                {
                                    var item = Model.ElementAt(i);
                                    var giaGoc = item.DonGia * item.SoLuong;
                                    var giamGia = giaGoc > 0 ? (giaGoc - item.ThanhTien) / giaGoc : 0;
                                    <input type="hidden" name="CartItems[@i].MaHh" value="@item.MaHh" />
                                    <input type="hidden" name="CartItems[@i].DonGia" value="@item.DonGia" />
                                    <input type="hidden" name="CartItems[@i].SoLuong" value="@item.SoLuong" />
                                    <input type="hidden" name="CartItems[@i].GiamGia" value="@giamGia" />
                                 }

                            <button type="submit" class="btn btn-success btn-lg w-100 fw-bold">
                                Thanh Toán Khi Nhận Hàng (COD)
                            </button>
                        </form>



                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- SweetAlert + Validation -->
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.5/font/bootstrap-icons.css">
<!-- Leaflet CSS & JS -->
<link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css" />
<script src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js"></script>


<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<script>
    const defaultLat = 10.8450343;
    const defaultLng = 106.8036769;

    function toRad(degree) {
        return degree * Math.PI / 180;
    }

    function calculateDistance(lat1, lon1, lat2, lon2) {
        const R = 6371;
        const dLat = toRad(lat2 - lat1);
        const dLon = toRad(lon2 - lon1);
        const a = Math.sin(dLat / 2) ** 2 +
                  Math.cos(toRad(lat1)) * Math.cos(toRad(lat2)) *
                  Math.sin(dLon / 2) ** 2;
        const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));
        return R * c;
    }

    function calculateShippingFee(distanceKm) {
        if (distanceKm <= 5) return 10000;
        return 10000 + Math.ceil(distanceKm - 5) * 2500;
    }

    async function updateDistanceFromAddress(address) {
        const res = await fetch(`https://nominatim.openstreetmap.org/search?format=json&q=${encodeURIComponent(address)}`);
        const data = await res.json();
        const distanceDiv = document.getElementById("distanceResult");
        const shippingDiv = document.getElementById("shippingFee");

        if (data.length > 0) {
            const lat = parseFloat(data[0].lat);
            const lon = parseFloat(data[0].lon);
            const distance = calculateDistance(lat, lon, defaultLat, defaultLng);
            const rounded = distance.toFixed(2);
            const fee = calculateShippingFee(distance);

            distanceDiv.innerText = `Khoảng cách đến kho: ${rounded} km`;
            shippingDiv.innerText = ` ${fee.toLocaleString()} đ`;
        } else {
            distanceDiv.innerText = "Không tìm thấy địa chỉ.";
            shippingDiv.innerText = "";
        }
    }

    document.addEventListener("DOMContentLoaded", () => {
        const addressSelect = document.getElementById("selectedAddress");
        if (addressSelect && addressSelect.value) {
            updateDistanceFromAddress(addressSelect.value);
        }

        addressSelect.addEventListener("change", function () {
            if (this.value) {
                updateDistanceFromAddress(this.value);
            }
        });
    });
</script>
<script>
    // Đồng bộ hiển thị phí trong bảng
    document.addEventListener("DOMContentLoaded", () => {
        const feeText = document.getElementById("shippingFee").innerText;
        document.getElementById("shippingFeeView").innerText = feeText;
    });
</script>

<script>
    let map;
    let marker;

    function initMap() {
        map = L.map('map').setView([10.762622, 106.660172], 13); // Tạm default TPHCM
        L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
            attribution: '&copy; OpenStreetMap contributors'
        }).addTo(map);

        marker = L.marker([10.762622, 106.660172]).addTo(map)
            .bindPopup("Địa chỉ giao hàng").openPopup();
    }

    async function updateMapFromAddress(address) {
        try {
            const response = await fetch(`https://nominatim.openstreetmap.org/search?format=json&q=${encodeURIComponent(address)}`);
            const data = await response.json();
            if (data.length > 0) {
                const lat = parseFloat(data[0].lat);
                const lon = parseFloat(data[0].lon);
                map.setView([lat, lon], 15);
                marker.setLatLng([lat, lon])
                    .bindPopup(address)
                    .openPopup();
            }
        } catch (err) {
            console.error("Lỗi khi tìm tọa độ từ địa chỉ:", err);
        }
    }

    document.addEventListener("DOMContentLoaded", function () {
        initMap();

        const addressSelect = document.getElementById("selectedAddress");
        if (addressSelect && addressSelect.value) {
            updateMapFromAddress(addressSelect.value); // Load địa chỉ ban đầu
        }

        addressSelect.addEventListener("change", function () {
            if (this.value) {
                updateMapFromAddress(this.value);
            }
        });
    });
</script>
<script>
    function openEditAddress() {
        Swal.fire({
            title: 'Sửa Địa Chỉ Chính',
            html: `
                <input id="mainAddress" class="swal2-input" placeholder="Ví dụ 1 Đường ...">
                <select id="provinceSelect" class="swal2-select"><option value="">Chọn Tỉnh/Thành phố</option></select>
                <select id="districtSelect" class="swal2-select" disabled><option value="">Chọn Quận/Huyện</option></select>
                <select id="wardSelect" class="swal2-select" disabled><option value="">Chọn Phường/Xã</option></select>
            `,
            focusConfirm: false,
            showCancelButton: true,
            confirmButtonText: 'Cập nhật',
            cancelButtonText: 'Hủy',
            confirmButtonColor: '#3085d6',
            preConfirm: () => {
                const address = document.getElementById('mainAddress').value.trim();
                const province = document.getElementById('provinceSelect');
                const district = document.getElementById('districtSelect');
                const ward = document.getElementById('wardSelect');

                if (!address || !province.value || !district.value || !ward.value) {
                    Swal.showValidationMessage('Vui lòng nhập đầy đủ thông tin.');
                    return false;
                }

                const fullAddress = `${address}, ${ward.options[ward.selectedIndex].text}, ${district.options[district.selectedIndex].text}, ${province.options[province.selectedIndex].text}`;
                return { fullAddress };
            }
        }).then(result => {
            if (result.isConfirmed) {
                fetch('/Payment/UpdateAddress', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/x-www-form-urlencoded'
                    },
                    body: new URLSearchParams({ newAddress: result.value.fullAddress })
                })
                .then(res => res.json())
                .then(data => {
                    if (data.success) {
                        Swal.fire('Thành công!', 'Địa chỉ đã được cập nhật.', 'success');
                        updateAddressDropdown(data.diaChi, null);
                        location.reload();
                    } else {
                        Swal.fire('Lỗi!', 'Không thể cập nhật địa chỉ.', 'error');
                    }
                });
            }
        });

        loadProvinces();
    }

    function openAddSecondary() {
        Swal.fire({
            title: 'Thêm Địa Chỉ Phụ',
            html: `
                <input id="secondaryAddress" class="swal2-input" placeholder="Ví dụ 1 Đường ...">
                <select id="provinceSelect" class="swal2-select"><option value="">Chọn Tỉnh/Thành phố</option></select>
                <select id="districtSelect" class="swal2-select" disabled><option value="">Chọn Quận/Huyện</option></select>
                <select id="wardSelect" class="swal2-select" disabled><option value="">Chọn Phường/Xã</option></select>
            `,
            focusConfirm: false,
            showCancelButton: true,
            confirmButtonText: 'Lưu',
            cancelButtonText: 'Hủy',
            confirmButtonColor: '#28a745',
            preConfirm: () => {
                const address = document.getElementById('secondaryAddress').value.trim();
                const province = document.getElementById('provinceSelect');
                const district = document.getElementById('districtSelect');
                const ward = document.getElementById('wardSelect');

                if (!address || !province.value || !district.value || !ward.value) {
                    Swal.showValidationMessage('Vui lòng nhập đầy đủ thông tin.');
                    return false;
                }

                const fullAddress = `${address}, ${ward.options[ward.selectedIndex].text}, ${district.options[district.selectedIndex].text}, ${province.options[province.selectedIndex].text}`;
                return { fullAddress };
            }
        }).then(result => {
            if (result.isConfirmed) {
                fetch('/Payment/AddSecondaryAddress', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/x-www-form-urlencoded'
                    },
                    body: new URLSearchParams({ secondaryAddress: result.value.fullAddress })
                })
                .then(res => res.json())
                .then(data => {
                    if (data.success) {
                        Swal.fire('Thành công!', 'Địa chỉ phụ đã được lưu.', 'success');
                        updateAddressDropdown(null, data.diaChiPhu);
                        location.reload();

                    } else {
                        Swal.fire('Lỗi!', 'Không thể lưu địa chỉ phụ.', 'error');
                    }
                });
            }
        });

        loadProvinces();
    }

    function updateAddressDropdown(mainAddress, secondaryAddress) {
        const select = document.getElementById('selectedAddress');
        select.innerHTML = ''; // Clear old options

        if (mainAddress) {
            const mainOpt = document.createElement('option');
            mainOpt.value = mainAddress;
            mainOpt.textContent = `${mainAddress} (Mặc định)`;
            select.appendChild(mainOpt);
        }

        if (secondaryAddress) {
            const subOpt = document.createElement('option');
            subOpt.value = secondaryAddress;
            subOpt.textContent = `${secondaryAddress} (Phụ)`;
            select.appendChild(subOpt);
        }

        if (!mainAddress && !secondaryAddress) {
            const empty = document.createElement('option');
            empty.disabled = true;
            empty.selected = true;
            empty.textContent = 'Không có địa chỉ';
            select.appendChild(empty);
        }
    }

    async function loadProvinces() {
        const provinceSelect = document.getElementById('provinceSelect');
        const districtSelect = document.getElementById('districtSelect');
        const wardSelect = document.getElementById('wardSelect');

        try {
            const res = await fetch('https://provinces.open-api.vn/api/p/');
            const data = await res.json();
            provinceSelect.innerHTML = '<option value="">Chọn Tỉnh/Thành phố</option>';
            data.forEach(p => {
                provinceSelect.add(new Option(p.name, p.code));
            });

            provinceSelect.onchange = async function () {
                districtSelect.disabled = true;
                wardSelect.disabled = true;
                districtSelect.innerHTML = '<option value="">Chọn Quận/Huyện</option>';
                wardSelect.innerHTML = '<option value="">Chọn Phường/Xã</option>';

                if (this.value) {
                    const res = await fetch(`https://provinces.open-api.vn/api/p/${this.value}?depth=2`);
                    const data = await res.json();
                    data.districts.forEach(d => {
                        districtSelect.add(new Option(d.name, d.code));
                    });
                    districtSelect.disabled = false;

                    districtSelect.onchange = async function () {
                        wardSelect.disabled = true;
                        wardSelect.innerHTML = '<option value="">Chọn Phường/Xã</option>';
                        if (this.value) {
                            const res = await fetch(`https://provinces.open-api.vn/api/d/${this.value}?depth=2`);
                            const data = await res.json();
                            data.wards.forEach(w => {
                                wardSelect.add(new Option(w.name, w.code));
                            });
                            wardSelect.disabled = false;
                        }
                    };
                }
            };
        } catch (err) {
            console.error('Error loading provinces:', err);
        }
    }
</script>


<script>
    // Hàm lấy ngày mai ở định dạng yyyy-mm-dd
    function getTomorrowDateString() {
        const tomorrow = new Date();
        tomorrow.setDate(tomorrow.getDate() + 7);
        const year = tomorrow.getFullYear();
        const month = String(tomorrow.getMonth() + 1).padStart(2, '0');
        const day = String(tomorrow.getDate()).padStart(2, '0');
        return `${year}-${month}-${day}`;
    }

    // Đặt 7 ngày  vào input khi trang tải
    document.addEventListener("DOMContentLoaded", function () {
        const ngayGiaoInput = document.getElementById("ngayGiao");
        ngayGiaoInput.value = getTomorrowDateString();
    });

    function getToday() {
        const today = new Date();
        today.setHours(0, 0, 0, 0);
        return today;
    }

    function isFutureDate(date) {
        const selectedDate = new Date(date);
        return selectedDate >= getToday();
    }

    function attachCommonData(form) {
    const ngayGiao = document.getElementById("ngayGiao").value;
    const address = document.getElementById("selectedAddress").value;

    if (!address || !ngayGiao || !isFutureDate(ngayGiao)) {
        Swal.fire({
            icon: 'error',
            title: 'Lỗi!',
            text: 'Vui lòng chọn địa chỉ và ngày giao hàng hợp lệ.',
            confirmButtonText: 'OK',
            confirmButtonColor: '#d33'
        });
        return false;
    }

    form.querySelector('[name="ngayGiao"]').value = ngayGiao;
    form.querySelector('[name="selectedAddress"]').value = address;

    const shippingText = document.getElementById("shippingFee").innerText;
    const match = shippingText.match(/([\d.,]+)/); // Lấy số tiền
    const phiVanChuyen = match ? parseFloat(match[1].replace(/,/g, '')) : 0;
    form.querySelector('[name="PhiVanChuyen"]').value = phiVanChuyen;

    return true;
}

</script>


@section Scripts {
        <script src="https://www.paypal.com/sdk/js?client-id=@ViewBag.PaypalClientId"></script>
        <script>
            paypal.Buttons({
                style: {
                    layout: 'horizontal',
                    color: 'blue',
                    shape: 'rect',
                    label: 'pay'
                },
                createOrder: (data, actions) => {
                    const ngayGiao = document.getElementById('ngayGiao').value;
                    const address = document.getElementById('selectedAddress').value;

                    // Lấy phí vận chuyển từ span
                    const shippingText = document.getElementById("shippingFee").innerText;
                    const match = shippingText.match(/([\d.,]+)/);
                    const PhiVanChuyen = match ? parseFloat(match[1].replace(/,/g, '')) : 0;

                    if (!ngayGiao || !isFutureDate(ngayGiao) || !address) {
                        Swal.fire({
                            icon: 'error',
                            title: 'Lỗi!',
                            text: 'Vui lòng chọn địa chỉ và ngày giao hàng hợp lệ.',
                            confirmButtonText: 'OK',
                            confirmButtonColor: '#d33'
                        });
                        return;
                    }

                    return fetch("/Payment/PaypalOrder", {
                        method: "POST",
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({ 
                            ngayGiao, 
                            selectedAddress: address,
                            PhiVanChuyen // 👈 Gửi kèm phí
                        })
                    })
                    .then(res => res.json())
                    .then(order => order.id);
                },
                onApprove: (data, actions) => {
                    const ngayGiao = document.getElementById('ngayGiao').value;
                    const address = document.getElementById('selectedAddress').value;

                    // Lấy phí vận chuyển (lại) nếu cần
                    const shippingText = document.getElementById("shippingFee").innerText;
                    const match = shippingText.match(/([\d.,]+)/);
                    const PhiVanChuyen = match ? parseFloat(match[1].replace(/,/g, '')) : 0;

                    return fetch(`/Payment/PaypalCapture?orderId=${data.orderID}&ngayGiao=${ngayGiao}&selectedAddress=${encodeURIComponent(address)}&PhiVanChuyen=${PhiVanChuyen}`, {
                        method: "POST"
                    })
                    .then(() => {
                        Swal.fire({
                            icon: 'success',
                            title: 'Thành công!',
                            text: 'Đơn hàng đã được thanh toán.',
                            confirmButtonText: 'OK',
                            confirmButtonColor: '#3085d6'
                        }).then(() => {
                            window.location.href = "/Payment/Success";
                        });
                    })
                    .catch(() => {
                        Swal.fire({
                            icon: 'error',
                            title: 'Thất bại!',
                            text: 'Có lỗi xảy ra khi xử lý đơn hàng.',
                            confirmButtonText: 'OK',
                            confirmButtonColor: '#d33'
                        });
                    });
                }
            }).render('#paypal-button-container');
        </script>
}
