@model IEnumerable<MyEStore.Models.CartItem>

@{
    ViewData["Title"] = "Thanh Toán";
}

@Html.Partial("livechat")

<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet" />
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css" />
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/sweetalert2@11/dist/sweetalert2.min.css" />

<style>
    .checkout-table th {
        background-color: #2b6cb0;
        color: white;
        padding: 15px;
        text-align: center;
    }
    .checkout-table td {
        padding: 15px;
        text-align: center;
    }
    .checkout-table img {
        border-radius: 10px;
        width: 100px;
        height: 100px;
        object-fit: cover;
    }
    .checkout-table tr:hover {
        background-color: #edf2f7;
    }
    .custom-button {
        background-color: #2b6cb0;
        color: white;
        padding: 12px 20px;
        border-radius: 10px;
        border: none;
        transition: background-color 0.3s ease, transform 0.3s ease;
        width: 100%;
        box-sizing: border-box;
        font-size: 15px;
    }
    .custom-button:hover {
        background-color: #2c5282;
        transform: scale(1.05);
    }
    .custom-secondary-button {
        background-color: #38a169;
        color: white;
        padding: 12px 20px;
        border-radius: 10px;
        border: none;
        transition: background-color 0.3s ease, transform 0.3s ease;
        width: 100%;
        box-sizing: border-box;
        font-size: 15px;
    }
    .custom-secondary-button:hover {
        background-color: #2f855a;
        transform: scale(1.05);
    }
    .custom-tertiary-button {
        background-color: #718096;
        color: white;
        padding: 12px 20px;
        border-radius: 10px;
        border: none;
        transition: background-color 0.3s ease, transform 0.3s ease;
        width: 100%;
        box-sizing: border-box;
        font-size: 15px;
    }
    .custom-tertiary-button:hover {
        background-color: #5a6b83;
        transform: scale(1.05);
    }
    .custom-circle-button {
        background-color: #ffffff;
        border: 2px solid #2b6cb0;
        color: #2b6cb0;
        border-radius: 50%;
        padding: 10px;
        transition: background-color 0.3s ease, color 0.3s ease, transform 0.3s ease;
    }
    .custom-circle-button:hover {
        background-color: #2b6cb0;
        color: white;
        transform: scale(1.1);
    }
    .payment-notes {
        background: linear-gradient(135deg, #f0f9ff 0%, #e6f7ff 100%);
        border-radius: 16px;
        padding: 20px;
        margin-top: 20px;
    }
    .swal2-popup {
        border-radius: 16px !important;
        padding: 20px !important;
        background: white;
        box-shadow: 0 4px 6px rgba(0,0,0,0.1), 0 2px 4px rgba(0,0,0,0.06) !important;
    }
    .swal2-input, .swal2-select {
        border: 1px solid #e2e8f0 !important;
        border-radius: 10px !important;
        padding: 10px !important;
        width: 100% !important;
        margin: 5px 0 !important;
    }
    .swal2-input:focus, .swal2-select:focus {
        border-color: #2b6cb0 !important;
        box-shadow: 0 0 0 3px rgba(43, 108, 176, 0.15) !important;
    }
</style>

<div class="container section-padding">
    <h1 class="page-title">Xác Nhận Thanh Toán</h1>

    <div class="row">
        <!-- Order Summary -->
        <div class="col-lg-8 mb-5">
            <div class="product-card" style="border-radius: 16px;">
                <h4 class="text-center text-2xl font-bold mb-5">Thông Tin Đơn Hàng</h4>
                <div class="table-responsive">
                    <table class="table checkout-table">
                        <thead>
                            <tr>
                                <th>Hình Ảnh</th>
                                <th>Sản Phẩm</th>
                                <th>Đơn Giá</th>
                                <th>Số Lượng</th>
                                <th>Thành Tiền</th>
                                <th>Giảm Giá</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var item in Model)
                            {
                                var giaGoc = item.DonGia * item.SoLuong;
                                var giamGia = giaGoc > 0 ? (giaGoc - item.ThanhTien) / giaGoc * 100 : 0;
                                <tr>
                                    <td>
                                        <img src="~/Hinh/HangHoa/@item.Hinh" alt="@item.TenHh">
                                    </td>
                                    <td>@item.TenHh</td>
                                    <td>@item.DonGia.ToString("#,##0") Vnđ</td>
                                    <td>@item.SoLuong</td>
                                    <td style="color: #e53e3e; font-weight: bold;">@item.ThanhTien.ToString("#,##0") Vnđ</td>
                                    <td>
                                        @if (giamGia > 0)
                                        {
                                            <span style="color: #38a169; font-weight: bold;">-${giamGia}%</span>
                                        }
                                        else
                                        {
                                            <span style="color: #718096;">0%</span>
                                        }
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>

                <div class="text-end mt-5">
                    <h3 class="text-xl font-bold">
                        Tổng tiền sản phẩm:
                        <span style="color: #e53e3e;">@Model.Sum(p => p.ThanhTien).ToString("#,##0") Vnđ</span>
                    </h3>
                </div>

                <!-- Shipping Address -->
                <div class="mt-6 text-center">
                    <label for="selectedAddress" class="form-label text-lg font-bold mb-3">Chọn Địa Chỉ Nhận Hàng:</label>
                    <div class="d-flex justify-content-center align-items-center gap-3 flex-wrap">
                        <select id="selectedAddress" class="form-select w-75">
                            @if (ViewBag.KhachHangs is MyEStore.Entities.KhachHang kh)
                            {
                                if (!string.IsNullOrWhiteSpace(kh.DiaChi))
                                {
                                    <option value="@kh.DiaChi">@kh.DiaChi (Mặc định)</option>
                                }
                                if (!string.IsNullOrWhiteSpace(kh.DiaChiPhu))
                                {
                                    <option value="@kh.DiaChiPhu">@kh.DiaChiPhu (Phụ)</option>
                                }
                            }
                            else
                            {
                                <option disabled selected>Không có địa chỉ</option>
                            }
                        </select>
                        <button class="custom-circle-button" onclick="openEditAddress()" title="Sửa Địa Chỉ Chính">
                            <i class="bi bi-pencil-square"></i>
                        </button>
                        <button class="custom-circle-button" onclick="openAddSecondary()" title="Thêm Địa Chỉ Phụ">
                            <i class="bi bi-plus-circle"></i>
                        </button>
                    </div>
                </div>
            </div>
        </div>

        <!-- Payment Methods -->
        <div class="col-lg-4">
            <div class="product-card" style="border-radius: 16px;">
                <h4 class="text-center text-2xl font-bold mb-5">Phương Thức Thanh Toán</h4>
                <div class="d-flex flex-column gap-4">
                    <!-- COD -->
                    <form method="post" action="/Payment/CodPayment" onsubmit="return attachCommonData(this)">
                        <input type="hidden" name="selectedAddress" />
                        <input type="hidden" name="PhiVanChuyen" />
                        @for (int i = 0; i < Model.Count(); i++)
                        {
                            var item = Model.ElementAt(i);
                            var giaGoc = item.DonGia * item.SoLuong;
                            var giamGia = giaGoc > 0 ? (giaGoc - item.ThanhTien) / giaGoc : 0;
                            <input type="hidden" name="CartItems[@i].MaHh" value="@item.MaHh" />
                            <input type="hidden" name="CartItems[@i].DonGia" value="@item.DonGia" />
                            <input type="hidden" name="CartItems[@i].SoLuong" value="@item.SoLuong" />
                            <input type="hidden" name="CartItems[@i].GiamGia" value="@giamGia" />
                        }
                        <button type="submit" class="custom-secondary-button">
                            <i class="fas fa-truck me-2"></i> Thanh Toán Khi Nhận Hàng (COD)
                        </button>
                    </form>

                    <!-- VNPay -->
                    <form method="post" action="/Payment/VnpayOrder" onsubmit="return attachCommonData(this)">
                        <input type="hidden" name="selectedAddress" />
                        <input type="hidden" name="PhiVanChuyen" />
                        @for (int i = 0; i < Model.Count(); i++)
                        {
                            var item = Model.ElementAt(i);
                            var giaGoc = item.DonGia * item.SoLuong;
                            var giamGia = giaGoc > 0 ? (giaGoc - item.ThanhTien) / giaGoc : 0;
                            <input type="hidden" name="CartItems[@i].MaHh" value="@item.MaHh" />
                            <input type="hidden" name="CartItems[@i].DonGia" value="@item.DonGia" />
                            <input type="hidden" name="CartItems[@i].SoLuong" value="@item.SoLuong" />
                            <input type="hidden" name="CartItems[@i].GiamGia" value="@giamGia" />
                        }
                        <button type="submit" class="custom-button">
                            <i class="fas fa-credit-card me-2"></i> Thanh Toán Bằng VNPay
                        </button>
                    </form>

                    <!-- MoMo (Hidden as per your original code) -->
                    <form method="post" action="/Payment/MomoPayment" onsubmit="return attachCommonData(this)" style="display: none;">
                        <input type="hidden" name="selectedAddress" />
                        <button type="submit" class="custom-button" style="background-color: #e53e3e;">Thanh Toán Bằng MoMo</button>
                    </form>

                    <!-- Print Invoice -->
                    <a href="@Url.Action("PrintInvoice", "Payment")?shippingFee=" class="custom-tertiary-button">
                        <i class="fas fa-print me-2"></i> Xem và In Hóa Đơn
                    </a>
                </div>
            </div>

            <!-- Payment Notes -->
            <div class="payment-notes">
                <h5 class="font-bold" style="color: #d69e2e; margin-bottom: 10px;">Lưu Ý:</h5>
                <p style="color: #718096; font-size: 14px;">Chức năng thanh toán VnPay. Vui lòng sử dụng tài khoản sau để trải nghiệm:</p>
                <h6 class="font-bold mt-3" style="color: #1a202c;">VnPay:</h6>
                <ul class="list-unstyled" style="font-size: 14px; color: #718096;">
                    <li><strong>Ngân hàng:</strong> NCB</li>
                    <li><strong>Số thẻ:</strong> 9704198526191432198</li>
                    <li><strong>Tên chủ thẻ:</strong> NGUYEN VAN A</li>
                    <li><strong>Ngày phát hành:</strong> 07/15</li>
                    <li><strong>Mật khẩu OTP:</strong> 123456</li>
                </ul>
                @* <h6 class="font-bold mt-3" style="color: #1a202c;">Paypal:</h6>
                <ul class="list-unstyled" style="font-size: 14px; color: #718096;">
                    <li><strong>Email:</strong> Testing-buyer@niie.com</li>
                    <li><strong>Mật khẩu:</strong> 12345678</li>
                </ul> *@
            </div>
        </div>
    </div>
</div>

<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<script>
    function openEditAddress() {
        Swal.fire({
            title: 'Sửa Địa Chỉ Chính',
            html: `
                <div style="padding: 20px;">
                    <input id="mainAddress" class="swal2-input w-full p-3" placeholder="Ví dụ: 1 Đường...">
                    <select id="provinceSelect" class="swal2-select"><option value="">Chọn Tỉnh/Thành phố</option></select>
                    <select id="districtSelect" class="swal2-select" disabled><option value="">Chọn Quận/Huyện</option></select>
                    <select id="wardSelect" class="swal2-select" disabled><option value="">Chọn Phường/Xã</option></select>
                </div>
            `,
            showCancelButton: true,
            confirmButtonText: 'Cập nhật',
            cancelButtonText: 'Hủy',
            confirmButtonColor: '#2b6cb0',
            cancelButtonColor: '#e53e3e',
            preConfirm: () => {
                const address = document.getElementById('mainAddress').value.trim();
                const province = document.getElementById('provinceSelect');
                const district = document.getElementById('districtSelect');
                const ward = document.getElementById('wardSelect');

                if (!address || !province.value || !district.value || !ward.value) {
                    Swal.showValidationMessage('Vui lòng nhập đầy đủ thông tin.');
                    return false;
                }

                const fullAddress = `${address}, ${ward.options[ward.selectedIndex].text}, ${district.options[district.selectedIndex].text}, ${province.options[province.selectedIndex].text}`;
                return { fullAddress };
            }
        }).then(result => {
            if (result.isConfirmed) {
                fetch('/Payment/UpdateAddress', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
                    body: new URLSearchParams({ newAddress: result.value.fullAddress })
                })
                .then(res => {
                    if (!res.ok) throw new Error('Network response was not ok');
                    return res.json();
                })
                .then(data => {
                    if (data.success) {
                        Swal.fire('Thành công!', 'Địa chỉ đã được cập nhật.', 'success');
                        updateAddressDropdown(data.diaChi, null);
                        location.reload();
                    } else {
                        Swal.fire('Lỗi!', 'Không thể cập nhật địa chỉ.', 'error');
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                    Swal.fire('Lỗi!', 'Có lỗi xảy ra khi cập nhật địa chỉ.', 'error');
                });
            }
        });

        loadProvinces();
    }

    function openAddSecondary() {
        Swal.fire({
            title: 'Thêm Địa Chỉ Phụ',
            html: `
                <div style="padding: 20px;">
                    <input id="secondaryAddress" class="swal2-input w-full p-3" placeholder="Ví dụ: 1 Đường...">
                    <select id="provinceSelect" class="swal2-select"><option value="">Chọn Tỉnh/Thành phố</option></select>
                    <select id="districtSelect" class="swal2-select" disabled><option value="">Chọn Quận/Huyện</option></select>
                    <select id="wardSelect" class="swal2-select" disabled><option value="">Chọn Phường/Xã</option></select>
                </div>
            `,
            showCancelButton: true,
            confirmButtonText: 'Lưu',
            cancelButtonText: 'Hủy',
            confirmButtonColor: '#38a169',
            cancelButtonColor: '#e53e3e',
            preConfirm: () => {
                const address = document.getElementById('secondaryAddress').value.trim();
                const province = document.getElementById('provinceSelect');
                const district = document.getElementById('districtSelect');
                const ward = document.getElementById('wardSelect');

                if (!address || !province.value || !district.value || !ward.value) {
                    Swal.showValidationMessage('Vui lòng nhập đầy đủ thông tin.');
                    return false;
                }

                const fullAddress = `${address}, ${ward.options[ward.selectedIndex].text}, ${district.options[district.selectedIndex].text}, ${province.options[province.selectedIndex].text}`;
                return { fullAddress };
            }
        }).then(result => {
            if (result.isConfirmed) {
                fetch('/Payment/AddSecondaryAddress', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
                    body: new URLSearchParams({ secondaryAddress: result.value.fullAddress })
                })
                .then(res => {
                    if (!res.ok) throw new Error('Network response was not ok');
                    return res.json();
                })
                .then(data => {
                    if (data.success) {
                        Swal.fire('Thành công!', 'Địa chỉ phụ đã được lưu.', 'success');
                        updateAddressDropdown(null, data.diaChiPhu);
                        location.reload();
                    } else {
                        Swal.fire('Lỗi!', 'Không thể lưu địa chỉ phụ.', 'error');
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                    Swal.fire('Lỗi!', 'Có lỗi xảy ra khi lưu địa chỉ phụ.', 'error');
                });
            }
        });

        loadProvinces();
    }

    function updateAddressDropdown(mainAddress, secondaryAddress) {
        const select = document.getElementById('selectedAddress');
        if (!select) return;
        select.innerHTML = '';

        if (mainAddress) {
            const mainOpt = document.createElement('option');
            mainOpt.value = mainAddress;
            mainOpt.textContent = `${mainAddress} (Mặc định)`;
            select.appendChild(mainOpt);
        }

        if (secondaryAddress) {
            const subOpt = document.createElement('option');
            subOpt.value = secondaryAddress;
            subOpt.textContent = `${secondaryAddress} (Phụ)`;
            select.appendChild(subOpt);
        }

        if (!mainAddress && !secondaryAddress) {
            const empty = document.createElement('option');
            empty.disabled = true;
            empty.selected = true;
            empty.textContent = 'Không có địa chỉ';
            select.appendChild(empty);
        }
    }

    async function loadProvinces() {
        const provinceSelect = document.getElementById('provinceSelect');
        const districtSelect = document.getElementById('districtSelect');
        const wardSelect = document.getElementById('wardSelect');

        if (!provinceSelect || !districtSelect || !wardSelect) {
            console.error('One or more select elements are missing');
            return;
        }

        try {
            const res = await fetch('https://provinces.open-api.vn/api/p/');
            if (!res.ok) throw new Error('Failed to fetch provinces');
            const data = await res.json();

            provinceSelect.innerHTML = '<option value="">Chọn Tỉnh/Thành phố</option>';
            districtSelect.innerHTML = '<option value="">Chọn Quận/Huyện</option>';
            wardSelect.innerHTML = '<option value="">Chọn Phường/Xã</option>';

            data.forEach(p => {
                const option = document.createElement('option');
                option.value = p.code;
                option.textContent = p.name;
                provinceSelect.appendChild(option);
            });

            provinceSelect.onchange = async function () {
                districtSelect.disabled = true;
                wardSelect.disabled = true;
                districtSelect.innerHTML = '<option value="">Chọn Quận/Huyện</option>';
                wardSelect.innerHTML = '<option value="">Chọn Phường/Xã</option>';

                if (this.value) {
                    const res = await fetch(`https://provinces.open-api.vn/api/p/${this.value}?depth=2`);
                    if (!res.ok) throw new Error('Failed to fetch districts');
                    const data = await res.json();

                    data.districts.forEach(d => {
                        const option = document.createElement('option');
                        option.value = d.code;
                        option.textContent = d.name;
                        districtSelect.appendChild(option);
                    });

                    districtSelect.disabled = false;

                    districtSelect.onchange = async function () {
                        wardSelect.disabled = true;
                        wardSelect.innerHTML = '<option value="">Chọn Phường/Xã</option>';
                        if (this.value) {
                            const res = await fetch(`https://provinces.open-api.vn/api/d/${this.value}?depth=2`);
                            if (!res.ok) throw new Error('Failed to fetch wards');
                            const data = await res.json();

                            data.wards.forEach(w => {
                                const option = document.createElement('option');
                                option.value = w.code;
                                option.textContent = w.name;
                                wardSelect.appendChild(option);
                            });
                            wardSelect.disabled = false;
                        }
                    };
                }
            };
        } catch (err) {
            console.error('Error loading provinces:', err);
            Swal.fire('Lỗi!', 'Không thể tải danh sách tỉnh/thành phố.', 'error');
        }
    }

    function attachCommonData(form) {
        const address = document.getElementById("selectedAddress").value;

        if (!address) {
            Swal.fire({
                icon: 'error',
                title: 'Lỗi!',
                text: 'Vui lòng chọn địa chỉ hợp lệ.',
                confirmButtonText: 'OK',
                confirmButtonColor: '#e53e3e'
            });
            return false;
        }

        form.querySelector('[name="selectedAddress"]').value = address;

        const shippingText = document.getElementById("shippingFee")?.innerText || "0";
        const match = shippingText.match(/([\d.,]+)/);
        const phiVanChuyen = match ? parseFloat(match[1].replace(/,/g, '')) : 0;
        form.querySelector('[name="PhiVanChuyen"]').value = phiVanChuyen;

        return true;
    }
</script>

@section Scripts {
    <script src="https://www.paypal.com/sdk/js?client-id=@ViewBag.PaypalClientId"></script>
    <script>
        paypal.Buttons({
            style: {
                layout: 'horizontal',
                color: 'blue',
                shape: 'rect',
                label: 'pay'
            },
            createOrder: (data, actions) => {
                const address = document.getElementById('selectedAddress').value;

                const shippingText = document.getElementById("shippingFee")?.innerText || "0";
                const match = shippingText.match(/([\d.,]+)/);
                const PhiVanChuyen = match ? parseFloat(match[1].replace(/,/g, '')) : 0;

                if (!address) {
                    Swal.fire({
                        icon: 'error',
                        title: 'Lỗi!',
                        text: 'Vui lòng chọn địa chỉ hợp lệ.',
                        confirmButtonText: 'OK',
                        confirmButtonColor: '#e53e3e'
                    });
                    return;
                }

                return fetch("/Payment/PaypalOrder", {
                    method: "POST",
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ selectedAddress: address, PhiVanChuyen })
                }).then(res => res.json()).then(order => order.id);
            },
            onApprove: (data, actions) => {
                const address = document.getElementById('selectedAddress').value;

                const shippingText = document.getElementById("shippingFee")?.innerText || "0";
                const match = shippingText.match(/([\d.,]+)/);
                const PhiVanChuyen = match ? parseFloat(match[1].replace(/,/g, '')) : 0;

                return fetch(`/Payment/PaypalCapture?orderId=${data.orderID}&selectedAddress=${encodeURIComponent(address)}&PhiVanChuyen=${PhiVanChuyen}`, {
                    method: "POST"
                }).then(() => {
                    Swal.fire({
                        icon: 'success',
                        title: 'Thành công!',
                        text: 'Đơn hàng đã được thanh toán.',
                        confirmButtonText: 'OK',
                        confirmButtonColor: '#2b6cb0'
                    }).then(() => { window.location.href = "/Payment/Success"; });
                }).catch(() => {
                    Swal.fire({
                        icon: 'error',
                        title: 'Thất bại!',
                        text: 'Có lỗi xảy ra khi xử lý đơn hàng.',
                        confirmButtonText: 'OK',
                        confirmButtonColor: '#e53e3e'
                    });
                });
            }
        }).render('#paypal-button-container');
    </script>
}