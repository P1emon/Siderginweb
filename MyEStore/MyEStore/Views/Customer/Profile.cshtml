@model MyEStore.Models.ProfileVM
@{
    Layout = "_Layout";
    ViewData["Title"] = "Quản lý tài khoản | MyEStore";
}
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.3/font/bootstrap-icons.min.css">
<style>
    /* Rank Tab Styles */
.rank-list {
    display: flex;
    flex-direction: column;
    gap: 1rem;
    margin-top: 1.5rem;
}

.rank-item {
    background-color: #f8f9fa;
    border-radius: 8px;
    padding: 1rem;
    transition: all 0.3s ease;
}

.rank-item.current-rank {
    background-color: #e7f3ff; /* Light blue for current rank */
    border: 2px solid #007bff; /* Blue border for emphasis */
}

.rank-header {
    display: flex;
    align-items: center;
    gap: 0.5rem;
}

.rank-icon {
    width: 65px;
    height: 50px;
}

.rank-title {
    font-size: 1.25rem;
    margin: 0;
    color: #333;
}

.rank-details {
    margin-top: 0.5rem;
}

.rank-details p {
    margin: 0.25rem 0;
    color: #555;
}

.current-rank-badge {
    display: inline-block;
    background-color: #007bff;
    color: white;
    padding: 0.25rem 0.5rem;
    border-radius: 12px;
    font-size: 0.875rem;
    margin-top: 0.5rem;
}

.profile-points-display {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    font-size: 1.1rem;
    margin-bottom: 1rem;
    color: #333;
}

.profile-points-display strong {
    color: #007bff;
}

/* Ensure consistency with other profile styles */
.profile-section {
    padding: 1.5rem;
    background-color: #fff;
    border-radius: 8px;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
}

.profile-section-title {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    font-size: 1.5rem;
    margin-bottom: 1rem;
    color: #333;
}
</style>
<link href="~/css/profile.css" rel="stylesheet">

<div class="container profile-container">
    <div class="profile-card">
        <div class="profile-card-header">
            <div class="profile-avatar-wrapper">
                <div class="profile-avatar">
                    @(string.IsNullOrEmpty(Model.FullName) ? "U" : Model.FullName.FirstOrDefault().ToString().ToUpper())
                </div>
            </div>
            <h3 class="profile-title">@(string.IsNullOrEmpty(Model.FullName) ? "Người dùng" : Model.FullName)</h3>
            <p class="profile-subtitle">@Model.Email</p>
        </div>

        <div class="profile-body">
            <!-- HTML cho phần tabs navigation -->
            <ul class="nav profile-nav-tabs" id="profileTabs" role="tablist">
                <li class="nav-item" role="presentation">
                    <button class="nav-link profile-tab-button active" id="personal-tab" data-bs-toggle="tab" data-bs-target="#profile" type="button" role="tab" aria-controls="profile" aria-selected="true">
                        <i class="bi bi-person-fill"></i>
                        <span>Thông tin cá nhân</span>
                    </button>
                </li>
                <li class="nav-item" role="presentation">
                    <button class="nav-link profile-tab-button" id="security-tab" data-bs-toggle="tab" data-bs-target="#password" type="button" role="tab" aria-controls="password" aria-selected="false">
                        <i class="bi bi-shield-lock-fill"></i>
                        <span>Bảo mật</span>
                    </button>
                </li>
                <li class="nav-item" role="presentation">
                    <button class="nav-link profile-tab-button" id="address-tab" data-bs-toggle="tab" data-bs-target="#address" type="button" role="tab" aria-controls="address" aria-selected="false">
                        <i class="bi bi-geo-alt-fill"></i>
                        <span>Địa chỉ</span>
                    </button>
                </li>
                <li class="nav-item" role="presentation">
                    <button class="nav-link profile-tab-button" id="rank-tab" data-bs-toggle="tab" data-bs-target="#rank" type="button" role="tab" aria-controls="rank" aria-selected="false">
                        <i class="bi bi-geo-alt-fill"></i>
                        <span>Xếp hạng</span>
                    </button>
                </li>
            </ul>


            <div class="tab-content profile-tab-content">
                <!-- Rank Tab -->
                <!-- Rank Tab -->
                <div class="tab-pane fade" id="rank" role="tabpanel" aria-labelledby="rank-tab">
                    <div class="profile-section">
                        <h4 class="profile-section-title">
                            <i class="bi bi-trophy-fill"></i>
                            Xếp hạng
                        </h4>

                        <!-- Display customer's current points -->
                        <div class="profile-points-display">
                            <i class="bi bi-star-fill"></i>
                            <span>Điểm hiện tại của bạn: <strong>@Model.Diem</strong></span>
                        </div>

                        <!-- List of ranks -->
                        <div class="rank-list">
                                            @foreach (var rank in Model.Ranks)
                                            {
                                    <!-- Determine if this is the customer's current rank -->
                                                var isCurrentRank = Model.Diem >= rank.MucDiemTu && Model.Diem <= rank.MucDiemDen;
                                    <div class="rank-item @(isCurrentRank ? "current-rank" : "")">
                                        <div class="rank-header">
                                            @if (!string.IsNullOrEmpty(rank.Icon))
                                            {
                                                    <img src="~/Hinh/Others/@rank.Icon" alt="@rank.TenRank" class="rank-icon" />
                                            }
                                            else
                                            {
                                                     <i class="bi bi-award-fill rank-icon"></i>
                                            }
                                            <h5 class="rank-title">@rank.TenRank</h5>
                                      </div>
                                        <div class="rank-details">
                                            <p><strong>Điểm yêu cầu:</strong> Từ @rank.MucDiemTu đến @rank.MucDiemDen</p>
                                                        @if (!string.IsNullOrEmpty(rank.LoiIch))
                                                        {
                                                    <p><strong>Lợi ích:</strong> @rank.LoiIch</p>
                                                        }
                                                        @if (isCurrentRank)
                                                        {
                                                    <span class="current-rank-badge">Hạng hiện tại</span>
                                                        }
                                        </div>
                                    </div>
                                            }
                        </div>
                    </div>
                </div>
                <!-- Profile Tab -->
                <div class="tab-pane fade show active" id="profile" role="tabpanel" aria-labelledby="profile-tab">
                    <div class="profile-section">
                        <h4 class="profile-section-title">
                            <i class="bi bi-person-vcard"></i>
                            Thông tin cá nhân
                        </h4>

                        @if (TempData["Success"] != null)
                        {
                            <div class="profile-alert profile-alert-success">
                                <i class="bi bi-check-circle-fill"></i>
                                <span>@TempData["Success"]</span>
                                <button type="button" class="profile-alert-close" onclick="this.parentElement.style.display='none';">
                                    <i class="bi bi-x"></i>
                                </button>
                            </div>
                        }

                        @if (TempData["Error"] != null)
                        {
                            <div class="profile-alert profile-alert-danger">
                                <i class="bi bi-exclamation-circle-fill"></i>
                                <span>@TempData["Error"]</span>
                                <button type="button" class="profile-alert-close" onclick="this.parentElement.style.display='none';">
                                    <i class="bi bi-x"></i>
                                </button>
                            </div>
                        }

                        <form asp-action="Profile" method="post" id="profileForm" class="profile-form">
                            <div class="profile-form-group">
                                <label asp-for="FullName" class="profile-form-label">Họ và Tên</label>
                                <div class="profile-input-container">
                                    <i class="bi bi-person-fill"></i>
                                    <input asp-for="FullName" class="profile-form-control" readonly />
                                    <button type="button" class="profile-edit-button" onclick="toggleEdit(this, 'FullName')">
                                        <i class="bi bi-pencil-fill"></i>
                                    </button>
                                </div>
                                <span asp-validation-for="FullName" class="profile-validation-error"></span>
                            </div>

                            <div class="profile-form-group">
                                <label asp-for="Email" class="profile-form-label">Email</label>
                                <div class="profile-input-container">
                                    <i class="bi bi-envelope-fill"></i>
                                    <input asp-for="Email" type="email" class="profile-form-control" readonly />
                                    <button type="button" class="profile-edit-button" onclick="toggleEdit(this, 'Email')">
                                        <i class="bi bi-pencil-fill"></i>
                                    </button>
                                </div>
                                <span asp-validation-for="Email" class="profile-validation-error"></span>
                            </div>

                            <div class="profile-form-group">
                                <label asp-for="PhoneNumber" class="profile-form-label">Số điện thoại</label>
                                <div class="profile-input-container">
                                    <i class="bi bi-telephone-fill"></i>
                                    <input asp-for="PhoneNumber" type="tel" class="profile-form-control" readonly />
                                    <button type="button" class="profile-edit-button" onclick="toggleEdit(this, 'PhoneNumber')">
                                        <i class="bi bi-pencil-fill"></i>
                                    </button>
                                </div>
                                <span asp-validation-for="PhoneNumber" class="profile-validation-error"></span>
                            </div>

                            <button type="submit" class="profile-primary-button" id="saveBtn" disabled>
                                <i class="bi bi-check2-circle"></i>
                                <span>Lưu thay đổi</span>
                            </button>
                        </form>
                    </div>
                </div>

                <!-- Password Tab -->
                <div class="tab-pane fade" id="password" role="tabpanel" aria-labelledby="security-tab">
                    <div class="profile-section">
                        <h4 class="profile-section-title">
                            <i class="bi bi-shield-lock"></i>
                            Đổi mật khẩu
                        </h4>

                        <form asp-action="ChangePassword" method="post" class="profile-form">
                            <div class="profile-form-group">
                                <label for="Password" class="profile-form-label">Mật khẩu hiện tại</label>
                                <div class="profile-input-container">
                                    <i class="bi bi-lock-fill"></i>
                                    <input type="password" id="Password" name="Password" class="profile-form-control" placeholder="Nhập mật khẩu hiện tại" required />
                                    <button type="button" class="profile-toggle-password" onclick="togglePasswordVisibility(this.parentElement)">
                                        <i class="bi bi-eye-slash-fill"></i>
                                    </button>
                                </div>
                            </div>

                            <div class="profile-form-group">
                                <label for="NewPassword" class="profile-form-label">Mật khẩu mới</label>
                                <div class="profile-input-container">
                                    <i class="bi bi-lock-fill"></i>
                                    <input type="password" id="NewPassword" name="NewPassword" class="profile-form-control" placeholder="Nhập mật khẩu mới" required />
                                    <button type="button" class="profile-toggle-password" onclick="togglePasswordVisibility(this.parentElement)">
                                        <i class="bi bi-eye-slash-fill"></i>
                                    </button>
                                </div>
                                <div class="profile-password-strength">
                                    <div class="strength-bar">
                                        <div class="strength-indicator" id="passwordStrength"></div>
                                    </div>
                                    <span id="strengthText">Độ mạnh mật khẩu</span>
                                </div>
                            </div>

                            <div class="profile-form-group">
                                <label for="ConfirmPassword" class="profile-form-label">Xác nhận mật khẩu</label>
                                <div class="profile-input-container">
                                    <i class="bi bi-lock-fill"></i>
                                    <input type="password" id="ConfirmPassword" name="ConfirmPassword" class="profile-form-control" placeholder="Nhập lại mật khẩu mới" required />
                                    <button type="button" class="profile-toggle-password" onclick="togglePasswordVisibility(this.parentElement)">
                                        <i class="bi bi-eye-slash-fill"></i>
                                    </button>
                                </div>
                            </div>

                            <button type="submit" class="profile-primary-button">
                                <i class="bi bi-key-fill"></i>
                                <span>Cập nhật mật khẩu</span>
                            </button>
                        </form>
                    </div>
                </div>
                <!-- Address Tab -->
                <div class="tab-pane fade" id="address" role="tabpanel" aria-labelledby="address-tab">
                    <div class="profile-section">
                        <h4 class="profile-section-title">
                            <i class="bi bi-pin-map-fill"></i>
                            Địa chỉ giao hàng
                        </h4>

                        @if (TempData["AddressSuccess"] != null)
                        {
                            <div class="profile-alert profile-alert-success">
                                <i class="bi bi-check-circle-fill"></i>
                                <span>@TempData["AddressSuccess"]</span>
                                <button type="button" class="profile-alert-close" onclick="this.parentElement.style.display='none';">
                                    <i class="bi bi-x"></i>
                                </button>
                            </div>
                        }

                        @if (TempData["AddressError"] != null)
                        {
                            <div class="profile-alert profile-alert-danger">
                                <i class="bi bi-exclamation-circle-fill"></i>
                                <span>@TempData["AddressError"]</span>
                                <button type="button" class="profile-alert-close" onclick="this.parentElement.style.display='none';">
                                    <i class="bi bi-x"></i>
                                </button>
                            </div>
                        }

                        <form id="addressForm" asp-action="UpdateAddress" method="post" class="profile-form">
                            <!-- Địa chỉ chính -->
                            <div class="profile-form-group">
                                <label class="profile-form-label">Địa chỉ chính</label>
                                <div class="profile-input-container" id="fullAddressContainer">
                                    <i class="bi bi-house-door-fill"></i>
                                    <input type="text" id="displayAddress" class="profile-form-control"
                                           value="@(string.IsNullOrEmpty(Model.DiaChi) ? "Chưa có địa chỉ" : Model.DiaChi)" readonly />
                                    <button type="button" class="profile-edit-button" onclick="toggleAddressEdit()">
                                        <i class="bi bi-pencil-fill"></i>
                                    </button>
                                </div>
                            </div>

                            <!-- Địa chỉ phụ -->
                            <div class="profile-form-group">
                                <label class="profile-form-label">Địa chỉ phụ</label>
                                <div class="profile-input-container" id="secondaryAddressContainer">
                                    <i class="bi bi-house-fill"></i>
                                    <input type="text" id="displaySecondaryAddress" class="profile-form-control"
                                           value="@(string.IsNullOrEmpty(Model.DiaChiPhu) ? "Chưa có địa chỉ phụ" : Model.DiaChiPhu)" readonly />
                                    <button type="button" class="profile-edit-button" onclick="toggleSecondaryAddressEdit()">
                                        <i class="bi bi-pencil-fill"></i>
                                    </button>
                                </div>
                            </div>

                            <!-- Form chỉnh sửa địa chỉ chi tiết -->
                            <div id="addressDetails" class="address-details-hidden">
                                <div class="profile-form-row">
                                    <div class="profile-form-group">
                                        <label for="province" class="profile-form-label">Tỉnh/Thành phố</label>
                                        <div class="profile-input-container">
                                            <i class="bi bi-geo-alt-fill"></i>
                                            <select id="province" name="province" class="profile-form-select" required>
                                                <option value="">Chọn Tỉnh/Thành phố</option>
                                            </select>
                                        </div>
                                    </div>

                                    <div class="profile-form-group">
                                        <label for="district" class="profile-form-label">Quận/Huyện</label>
                                        <div class="profile-input-container">
                                            <i class="bi bi-geo-alt-fill"></i>
                                            <select id="district" name="district" class="profile-form-select" required>
                                                <option value="">Chọn Quận/Huyện</option>
                                            </select>
                                        </div>
                                    </div>
                                </div>

                                <div class="profile-form-row">
                                    <div class="profile-form-group">
                                        <label for="ward" class="profile-form-label">Phường/Xã</label>
                                        <div class="profile-input-container">
                                            <i class="bi bi-geo-alt-fill"></i>
                                            <select id="ward" name="ward" class="profile-form-select" required>
                                                <option value="">Chọn Phường/Xã</option>
                                            </select>
                                        </div>
                                    </div>

                                    <div class="profile-form-group">
                                        <label for="streetAddress" class="profile-form-label">Địa chỉ cụ thể</label>
                                        <div class="profile-input-container">
                                            <i class="bi bi-signpost-fill"></i>
                                            <input type="text" id="streetAddress" name="streetAddress" class="profile-form-control" placeholder="Số nhà, tên đường" required>
                                        </div>
                                    </div>
                                </div>

                                <div class="profile-address-preview">
                                    <h5><i class="bi bi-check-circle"></i> Địa chỉ đầy đủ</h5>
                                    <p id="fullAddress" class="profile-full-address">Vui lòng nhập thông tin địa chỉ</p>
                                    <input type="hidden" id="DiaChi" name="diaChi" value="@Model.DiaChi">
                                    <!-- Thêm trường để lưu trạng thái chỉnh sửa -->
                                    <input type="hidden" id="addressEditMode" name="addressEditMode" value="primary">
                                </div>

                                <div class="profile-form-actions">
                                    <button type="button" class="profile-secondary-button" onclick="cancelAddressEdit()">
                                        <i class="bi bi-x-circle"></i>
                                        <span>Hủy</span>
                                    </button>
                                    <button type="submit" class="profile-primary-button">
                                        <i class="bi bi-check2-circle"></i>
                                        <span>Lưu địa chỉ</span>
                                    </button>
                                </div>
                            </div>
                        </form>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/js/bootstrap.bundle.min.js"></script>
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            // Toggle edit mode for profile fields
            window.toggleEdit = function (button, fieldName) {
                const inputContainer = button.closest('.profile-input-container');
                const input = inputContainer.querySelector(`[name="${fieldName}"]`);
                const icon = button.querySelector('i');

                if (input.hasAttribute('readonly')) {
                    input.removeAttribute('readonly');
                    input.focus();
                    icon.classList.replace('bi-pencil-fill', 'bi-check-fill');
                    inputContainer.classList.add('is-editing');
                    document.getElementById('saveBtn').disabled = false;
                } else {
                    input.setAttribute('readonly', '');
                    icon.classList.replace('bi-check-fill', 'bi-pencil-fill');
                    inputContainer.classList.remove('is-editing');
                }
            };

            // Toggle password visibility
            window.togglePasswordVisibility = function (container) {
                const input = container.querySelector('input');
                const icon = container.querySelector('.profile-toggle-password i');

                if (input.type === 'password') {
                    input.type = 'text';
                    icon.classList.replace('bi-eye-slash-fill', 'bi-eye-fill');
                } else {
                    input.type = 'password';
                    icon.classList.replace('bi-eye-fill', 'bi-eye-slash-fill');
                }
            };

            // Evaluate password strength
            window.evaluatePasswordStrength = function (password) {
                const strengthBar = document.getElementById('passwordStrength');
                const strengthText = document.getElementById('strengthText');

                if (!password) {
                    strengthBar.style.width = '0%';
                    strengthBar.className = 'strength-indicator';
                    strengthText.textContent = 'Độ mạnh mật khẩu';
                    return;
                }

                let strength = 0;

                // Length check
                if (password.length >= 8) strength += 25;

                // Character variety checks
                if (/[A-Z]/.test(password)) strength += 25;
                if (/[0-9]/.test(password)) strength += 25;
                if (/[^A-Za-z0-9]/.test(password)) strength += 25;

                // Update UI
                strengthBar.style.width = strength + '%';

                if (strength <= 25) {
                    strengthBar.className = 'strength-indicator weak';
                    strengthText.textContent = 'Yếu';
                } else if (strength <= 50) {
                    strengthBar.className = 'strength-indicator medium';
                    strengthText.textContent = 'Trung bình';
                } else if (strength <= 75) {
                    strengthBar.className = 'strength-indicator good';
                    strengthText.textContent = 'Khá mạnh';
                } else {
                    strengthBar.className = 'strength-indicator strong';
                    strengthText.textContent = 'Mạnh';
                }
            };

            // Setup password strength meter
            const newPasswordInput = document.getElementById('NewPassword');
            if (newPasswordInput) {
                newPasswordInput.addEventListener('input', function () {
                    evaluatePasswordStrength(this.value);
                });
            }

            // Add ripple effect to buttons
            const buttons = document.querySelectorAll('.profile-primary-button, .profile-secondary-button, .profile-edit-button, .profile-address-edit');

            buttons.forEach(button => {
                button.addEventListener('click', function (e) {
                    const x = e.clientX - e.target.getBoundingClientRect().left;
                    const y = e.clientY - e.target.getBoundingClientRect().top;

                    const ripple = document.createElement('span');
                    ripple.classList.add('profile-ripple');
                    ripple.style.left = `${x}px`;
                    ripple.style.top = `${y}px`;

                    this.appendChild(ripple);

                    setTimeout(() => {
                        ripple.remove();
                    }, 600);
                });
            });

            // Tab animation
            const tabButtons = document.querySelectorAll('.profile-nav-tabs .nav-link');
            const indicator = document.createElement('span');
            indicator.className = 'profile-nav-indicator';

            if (tabButtons.length > 0) {
                document.querySelector('.profile-nav-tabs').appendChild(indicator);

                function positionIndicator(activeTab) {
                    const rect = activeTab.getBoundingClientRect();
                    const parentRect = activeTab.closest('.profile-nav-tabs').getBoundingClientRect();

                    indicator.style.left = `${rect.left - parentRect.left}px`;
                    indicator.style.width = `${rect.width}px`;
                }

                // Initial position
                positionIndicator(document.querySelector('.profile-nav-tabs .nav-link.active'));

                // Update on tab click
                tabButtons.forEach(button => {
                    button.addEventListener('click', function () {
                        positionIndicator(this);
                    });
                });

                // Update on window resize
                window.addEventListener('resize', function () {
                    positionIndicator(document.querySelector('.profile-nav-tabs .nav-link.active'));
                });
            }

            // Address Form Logic
            const provinceSelect = document.getElementById('province');
            const districtSelect = document.getElementById('district');
            const wardSelect = document.getElementById('ward');
            const streetAddressInput = document.getElementById('streetAddress');
            const fullAddressDisplay = document.getElementById('fullAddress');
            const diaChiInput = document.getElementById('DiaChi');
            const addressEditModeInput = document.getElementById('addressEditMode');

            if (!provinceSelect) return;

            // Loading states
            function setLoading(select, loading) {
                select.disabled = loading;
                const container = select.closest('.profile-input-container');

                if (loading) {
                    container.classList.add('is-loading');

                    if (!container.querySelector('.profile-loading-spinner')) {
                        const spinner = document.createElement('div');
                        spinner.className = 'profile-loading-spinner';
                        container.appendChild(spinner);
                    }
                } else {
                    container.classList.remove('is-loading');

                    const spinner = container.querySelector('.profile-loading-spinner');
                    if (spinner) spinner.remove();
                }
            }

            // Fetch provinces
            window.loadProvinces = async function () {
                try {
                    setLoading(provinceSelect, true);
                    const response = await fetch('https://provinces.open-api.vn/api/p/');

                    if (!response.ok) throw new Error('Network response was not ok');

                    const data = await response.json();

                    provinceSelect.innerHTML = '<option value="">Chọn Tỉnh/Thành phố</option>';

                    data.forEach(province => {
                        const option = new Option(province.name, province.code);
                        provinceSelect.add(option);
                    });

                    // Sau khi tải tỉnh/thành, điền giá trị đã lưu
                    const savedProvince = sessionStorage.getItem('savedProvince');
                    if (savedProvince) {
                        // Tìm và chọn tỉnh/thành phù hợp
                        for (let i = 0; i < provinceSelect.options.length; i++) {
                            if (provinceSelect.options[i].text === savedProvince) {
                                provinceSelect.selectedIndex = i;
                                provinceSelect.dispatchEvent(new Event('change'));
                                break;
                            }
                        }
                    }
                } catch (error) {
                    console.error('Error loading provinces:', error);
                    showAddressError('Không thể tải danh sách tỉnh/thành phố. Vui lòng thử lại sau.');
                } finally {
                    setLoading(provinceSelect, false);
                }
            };

            // Show error message for address
            function showAddressError(message) {
                const errorContainer = document.createElement('div');
                errorContainer.className = 'profile-alert profile-alert-danger';
                errorContainer.innerHTML = `
                            <i class="bi bi-exclamation-circle-fill"></i>
                            <span>${message}</span>
                            <button type="button" class="profile-alert-close" onclick="this.parentElement.remove();">
                                <i class="bi bi-x"></i>
                            </button>
                        `;

                const addressForm = document.getElementById('addressForm');
                addressForm.parentNode.insertBefore(errorContainer, addressForm);

                setTimeout(() => {
                    errorContainer.remove();
                }, 5000);
            }

            // Handle province change
            provinceSelect.addEventListener('change', async function () {
                districtSelect.innerHTML = '<option value="">Chọn Quận/Huyện</option>';
                wardSelect.innerHTML = '<option value="">Chọn Phường/Xã</option>';

                if (this.value) {
                    try {
                        setLoading(districtSelect, true);
                        const response = await fetch(`https://provinces.open-api.vn/api/p/${this.value}?depth=2`);

                        if (!response.ok) throw new Error('Network response was not ok');

                        const data = await response.json();

                        data.districts.forEach(district => {
                            const option = new Option(district.name, district.code);
                            districtSelect.add(option);
                        });

                        // Sau khi tải quận/huyện, điền giá trị đã lưu
                        const savedDistrict = sessionStorage.getItem('savedDistrict');
                        if (savedDistrict) {
                            setTimeout(() => {
                                for (let i = 0; i < districtSelect.options.length; i++) {
                                    if (districtSelect.options[i].text === savedDistrict) {
                                        districtSelect.selectedIndex = i;
                                        districtSelect.dispatchEvent(new Event('change'));
                                        break;
                                    }
                                }
                            }, 300);
                        }
                    } catch (error) {
                        console.error('Error loading districts:', error);
                        showAddressError('Không thể tải danh sách quận/huyện. Vui lòng thử lại sau.');
                    } finally {
                        setLoading(districtSelect, false);
                    }
                }

                updateFullAddress();
            });

            // Handle district change
            districtSelect.addEventListener('change', async function () {
                wardSelect.innerHTML = '<option value="">Chọn Phường/Xã</option>';

                if (this.value) {
                    try {
                        setLoading(wardSelect, true);
                        const response = await fetch(`https://provinces.open-api.vn/api/d/${this.value}?depth=2`);

                        if (!response.ok) throw new Error('Network response was not ok');

                        const data = await response.json();

                        data.wards.forEach(ward => {
                            const option = new Option(ward.name, ward.code);
                            wardSelect.add(option);
                        });

                        // Sau khi tải phường/xã, điền giá trị đã lưu
                        const savedWard = sessionStorage.getItem('savedWard');
                        if (savedWard) {
                            setTimeout(() => {
                                for (let i = 0; i < wardSelect.options.length; i++) {
                                    if (wardSelect.options[i].text === savedWard) {
                                        wardSelect.selectedIndex = i;
                                        updateFullAddress();
                                        break;
                                    }
                                }
                                // Xóa các giá trị đã lưu sau khi đã điền
                                sessionStorage.removeItem('savedProvince');
                                sessionStorage.removeItem('savedDistrict');
                                sessionStorage.removeItem('savedWard');
                            }, 300);
                        }
                    } catch (error) {
                        console.error('Error loading wards:', error);
                        showAddressError('Không thể tải danh sách phường/xã. Vui lòng thử lại sau.');
                    } finally {
                        setLoading(wardSelect, false);
                    }
                }

                updateFullAddress();
            });

            // Update full address
            function updateFullAddress() {
                const province = provinceSelect.options[provinceSelect.selectedIndex]?.text || '';
                const district = districtSelect.options[districtSelect.selectedIndex]?.text || '';
                const ward = wardSelect.options[wardSelect.selectedIndex]?.text || '';
                const street = streetAddressInput.value.trim();

                let addressParts = [];
                if (street) addressParts.push(street);
                if (ward && ward !== 'Chọn Phường/Xã') addressParts.push(ward);
                if (district && district !== 'Chọn Quận/Huyện') addressParts.push(district);
                if (province && province !== 'Chọn Tỉnh/Thành phố') addressParts.push(province);

                const fullAddress = addressParts.join(', ');

                fullAddressDisplay.textContent = fullAddress || 'Vui lòng nhập thông tin địa chỉ';

                // Lưu vào input thích hợp dựa trên trạng thái chỉnh sửa
                if (addressEditModeInput.value === 'primary') {
                    diaChiInput.value = fullAddress;
                } else {
                    // Sử dụng hidden input để lưu địa chỉ phụ
                    if (!document.getElementById('DiaChiPhu')) {
                        const diaChiPhuInput = document.createElement('input');
                        diaChiPhuInput.type = 'hidden';
                        diaChiPhuInput.id = 'DiaChiPhu';
                        diaChiPhuInput.name = 'diaChiPhu';
                        document.getElementById('addressForm').appendChild(diaChiPhuInput);
                    }
                    document.getElementById('DiaChiPhu').value = fullAddress;
                }

                // Visualize address completeness
                const addressPreview = document.querySelector('.profile-address-preview');

                if (fullAddress) {
                    addressPreview.classList.add('complete');
                } else {
                    addressPreview.classList.remove('complete');
                }
            }

            // Additional event listeners
            wardSelect.addEventListener('change', updateFullAddress);
            streetAddressInput.addEventListener('input', updateFullAddress);

            // Collapse animation
            const collapseElement = document.getElementById('addressFormCollapse');
            if (collapseElement) {
                collapseElement.addEventListener('show.bs.collapse', function () {
                    this.style.display = 'block';

                    setTimeout(() => {
                        this.style.height = this.scrollHeight + 'px';
                        this.style.opacity = '1';
                    }, 10);
                });

                collapseElement.addEventListener('hide.bs.collapse', function () {
                    this.style.height = '0';
                    this.style.opacity = '0';

                    setTimeout(() => {
                        this.style.display = 'none';
                    }, 300);
                });
            }

            // Hàm xử lý hiển thị/ẩn form chi tiết địa chỉ chính
            window.toggleAddressEdit = function () {
                const detailsSection = document.getElementById('addressDetails');
                const fullAddressContainer = document.getElementById('fullAddressContainer');
                const editButton = fullAddressContainer.querySelector('.profile-edit-button');
                const icon = editButton.querySelector('i');

                if (detailsSection.classList.contains('address-details-hidden')) {
                    // Hiện form chi tiết
                    detailsSection.classList.remove('address-details-hidden');
                    detailsSection.classList.add('address-details-visible');
                    fullAddressContainer.classList.add('is-editing');
                    icon.classList.replace('bi-pencil-fill', 'bi-check-fill');

                    // Đặt chế độ chỉnh sửa là địa chỉ chính
                    document.getElementById('addressEditMode').value = 'primary';

                    // Nếu đã có địa chỉ, phân tích và đặt giá trị ban đầu cho form
                    const currentAddress = document.getElementById('displayAddress').value;
                    if (currentAddress && currentAddress !== "Chưa có địa chỉ") {
                        parseAddressToFormFields(currentAddress);
                    }

                    // Tải dữ liệu tỉnh/thành phố nếu chưa được tải
                    if (provinceSelect.options.length <= 1) {
                        loadProvinces();
                    }
                } else {
                    saveEditedAddress();
                }
            };

            // Hàm xử lý hiển thị/ẩn form chi tiết địa chỉ phụ
            window.toggleSecondaryAddressEdit = function () {
                const detailsSection = document.getElementById('addressDetails');
                const secondaryAddressContainer = document.getElementById('secondaryAddressContainer');
                const editButton = secondaryAddressContainer.querySelector('.profile-edit-button');
                const icon = editButton.querySelector('i');

                if (detailsSection.classList.contains('address-details-hidden')) {
                    // Hiện form chi tiết
                    detailsSection.classList.remove('address-details-hidden');
                    detailsSection.classList.add('address-details-visible');
                    secondaryAddressContainer.classList.add('is-editing');
                    icon.classList.replace('bi-pencil-fill', 'bi-check-fill');

                    // Đặt chế độ chỉnh sửa là địa chỉ phụ
                    document.getElementById('addressEditMode').value = 'secondary';

                    // Nếu đã có địa chỉ phụ, phân tích và đặt giá trị ban đầu cho form
                    const currentAddress = document.getElementById('displaySecondaryAddress').value;
                    if (currentAddress && currentAddress !== "Chưa có địa chỉ phụ") {
                        parseAddressToFormFields(currentAddress);
                    } else {
                        // Reset form fields
                        streetAddressInput.value = '';
                        provinceSelect.selectedIndex = 0;
                        districtSelect.innerHTML = '<option value="">Chọn Quận/Huyện</option>';
                        wardSelect.innerHTML = '<option value="">Chọn Phường/Xã</option>';
                        updateFullAddress();
                    }

                    // Tải dữ liệu tỉnh/thành phố nếu chưa được tải
                    if (provinceSelect.options.length <= 1) {
                        loadProvinces();
                    }
                } else {
                    saveEditedAddress();
                }
            };

            // Hủy chỉnh sửa
            window.cancelAddressEdit = function () {
                const detailsSection = document.getElementById('addressDetails');
                const fullAddressContainer = document.getElementById('fullAddressContainer');
                const secondaryAddressContainer = document.getElementById('secondaryAddressContainer');

                // Xóa trạng thái is-editing khỏi cả hai container
                fullAddressContainer.classList.remove('is-editing');
                secondaryAddressContainer.classList.remove('is-editing');

                // Đổi icon về trạng thái ban đầu
                const primaryEditButton = fullAddressContainer.querySelector('.profile-edit-button i');
                const secondaryEditButton = secondaryAddressContainer.querySelector('.profile-edit-button i');
                primaryEditButton.classList.replace('bi-check-fill', 'bi-pencil-fill');
                secondaryEditButton.classList.replace('bi-check-fill', 'bi-pencil-fill');

                // Ẩn form chi tiết
                detailsSection.classList.add('address-details-hidden');
                detailsSection.classList.remove('address-details-visible');
            };

            // Lưu địa chỉ đã chỉnh sửa (chỉ cập nhật hiển thị, không submit form)
            function saveEditedAddress() {
                const fullAddress = document.getElementById('fullAddress').textContent;
                const editMode = document.getElementById('addressEditMode').value;

                if (fullAddress && fullAddress !== "Vui lòng nhập thông tin địa chỉ") {
                    if (editMode === 'primary') {
                        document.getElementById('displayAddress').value = fullAddress;
                    } else {
                        document.getElementById('displaySecondaryAddress').value = fullAddress;
                    }
                }
                cancelAddressEdit();
            }

            // Phân tích địa chỉ hiện tại để điền vào form
            function parseAddressToFormFields(fullAddress) {
                // Phân tách địa chỉ theo dấu phẩy: Số nhà đường, Phường xã, Quận huyện, Tỉnh thành
                const parts = fullAddress.split(', ');
                if (parts.length >= 4) {
                    document.getElementById('streetAddress').value = parts[0];
                    // Các phần còn lại sẽ được điền sau khi tải dữ liệu tỉnh/thành

                    // Lưu giá trị để điền sau
                    sessionStorage.setItem('savedProvince', parts[3]);
                    sessionStorage.setItem('savedDistrict', parts[2]);
                    sessionStorage.setItem('savedWard', parts[1]);
                }
            }

            // Initialize provinces loading if needed
            if (document.getElementById('addressDetails') && document.getElementById('addressDetails').classList.contains('address-details-visible')) {
                loadProvinces();
            }
        });
    </script>
}